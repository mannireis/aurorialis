[gd_resource type="ShaderMaterial" load_steps=6 format=3 uid="uid://dsnckwmnx508v"]

[ext_resource type="Texture2D" uid="uid://p1l5oel3t3b6" path="res://weapons/sword/sci-fi_sword_Image_4.png" id="1_b11a0"]
[ext_resource type="Texture2D" uid="uid://orb11h6ixyg4" path="res://weapons/sword/sci-fi_sword_Image_6.png" id="2_sf1ln"]
[ext_resource type="Texture2D" uid="uid://lreikwdhs7om" path="res://weapons/sword/sci-fi_sword_Image_5.png" id="3_tdiks"]
[ext_resource type="Texture2D" uid="uid://dw7ouqd3w8vq" path="res://weapons/sword/sci-fi_sword_Image_7.png" id="4_dueck"]

[sub_resource type="Shader" id="Shader_l2cun"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_g, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float fov = 77;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;

	float scale = 1.0 / tan(fov * 0.5 * PI / 180.0);
	PROJECTION_MATRIX[0][0] = scale / (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y);
	PROJECTION_MATRIX[1][1] = -scale;

	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, -0.99);
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(0.0, 1.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = texture(texture_normal, base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
}
"

[resource]
resource_name = "blade_2048x4096"
render_priority = 0
shader = SubResource("Shader_l2cun")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/texture_albedo = ExtResource("1_b11a0")
shader_parameter/albedo_texture_size = Vector2i(512, 1024)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/texture_metallic = ExtResource("3_tdiks")
shader_parameter/metallic_texture_channel = Vector4(0, 0, 1, 0)
shader_parameter/texture_roughness = ExtResource("3_tdiks")
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/texture_emission = ExtResource("2_sf1ln")
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 4.67811
shader_parameter/texture_normal = ExtResource("4_dueck")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/fov = 77.0
